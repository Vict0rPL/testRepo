{"remainingRequest":"F:\\frontend_dev_test\\frontend-developer-test-a1\\subPage\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!F:\\frontend_dev_test\\frontend-developer-test-a1\\subPage\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!F:\\frontend_dev_test\\frontend-developer-test-a1\\subPage\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\frontend_dev_test\\frontend-developer-test-a1\\subPage\\src\\App.vue?vue&type=template&id=7ba5bd90&","dependencies":[{"path":"F:\\frontend_dev_test\\frontend-developer-test-a1\\subPage\\src\\App.vue","mtime":1583427852913},{"path":"F:\\frontend_dev_test\\frontend-developer-test-a1\\subPage\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\frontend_dev_test\\frontend-developer-test-a1\\subPage\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"F:\\frontend_dev_test\\frontend-developer-test-a1\\subPage\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\frontend_dev_test\\frontend-developer-test-a1\\subPage\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}